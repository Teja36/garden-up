// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  imageUrl    String
  categories  Category[]
}

model Category {
  id           Int         @id @default(autoincrement())
  name         String
  products     Product[]
  collectionId Int?
  collection   Collection? @relation(fields: [collectionId], references: [id])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  createdAt   DateTime @default(now())
  price       Float
  stock       Int
  imageUrl    String?
  featured    Boolean? @default(false)
  discount    Float?
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [id])
  rating      Decimal? @default(0) @db.Decimal(2, 1)
  reviews     Review[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  reviews       Review[]
  accounts      Account[]
  sessions      Session[]
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int
  title       String
  description String?
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId   Int
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}
